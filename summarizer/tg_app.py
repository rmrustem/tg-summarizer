import datetime

from google import genai
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from summarizer import db
from summarizer.config import settings
from summarizer.models import Base, Message

client = genai.Client(api_key=settings.gemini_key)


async def save_text(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if chat_id not in settings.chats_whitelist:
        return
    if update.message.from_user.is_bot:
        return

    msg = Message(
        chat_id=chat_id,
        message_id=update.message.message_id,
        user=update.message.from_user.first_name,
        text=update.message.text,
        created=update.message.date,
    )
    with db.Session() as session:
        session.add(msg)
        session.commit()


async def get_messages(chat_id: int, hours: int = 24) -> list[Message]:
    since = datetime.datetime.utcnow() - datetime.timedelta(hours=hours)
    with db.Session() as session:
        return (
            session.query(Message)
            .filter(Message.chat_id == chat_id)
            .filter(Message.created > since)
            .all()
        )


async def summarize(messages: list[Message], chat_id: int) -> str:
    if not messages:
        return ""

    model = "gemini-2.0-flash"

    text = "\n".join(
        [f"{msg.message_id} {msg.user}: {msg.text}" for msg in messages if msg.text]
    )
    prompt = f"""–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (–±–µ–∑ –≤–≤–æ–¥–Ω–æ–π —á–∞—Å—Ç–∏) —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram —á–∞—Ç–∞ (–Ω–æ–º–µ—Ä —á–∞—Ç–∞ "{chat_id}") –≤ –≤–∏–¥–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–∞ "–û–±—Å—É–¥–∏–ª–∏ —ç—Ç–æ, —É–∑–Ω–∞–ª–∏ –Ω–æ–≤–æ—Å—Ç—å —Ç–∞–∫—É—é-—Ç–æ, –í–∞—Å—è —Å–¥–µ–ª–∞–ª —Ç–æ-—Ç–æ". –û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –∫–∞–∫ —Å—Å—ã–ª–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ html) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: \n\n"""  # pylint:disable=line-too-long
    response = client.models.generate_content(model=model, contents=prompt + text)
    return str(response.text)


async def post_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    messages = await get_messages(chat_id)
    summary = await summarize(messages, chat_id)
    intro = "‚ö°Ô∏è<b>–î–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</b> üóû\n"
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=intro + summary, parse_mode="HTML"
    )


def start() -> None:
    Base.metadata.create_all(bind=db.engine)
    app = ApplicationBuilder().token(settings.tg_bot_key).build()
    save_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), save_text)
    app.add_handler(save_handler)
    app.add_handler(CommandHandler("summary", post_summary))
    app.run_polling()
